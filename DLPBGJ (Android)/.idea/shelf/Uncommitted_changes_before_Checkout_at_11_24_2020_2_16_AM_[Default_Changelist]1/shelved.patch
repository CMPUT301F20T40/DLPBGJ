Index: app/src/main/java/com/example/dlpbgj/ViewNotifications.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.dlpbgj;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.ListView;\r\n\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.firebase.firestore.CollectionReference;\r\nimport com.google.firebase.firestore.EventListener;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.FirebaseFirestoreException;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Set;\r\n\r\npublic class ViewNotifications extends AppCompatActivity {\r\n    ListView notificationList;\r\n    ArrayList<Book> bookDataList;\r\n    private User currentUser;\r\n    ArrayList<String> notifications;\r\n    ArrayAdapter<String> notifAdapter;\r\n    FirebaseFirestore db;\r\n    CollectionReference userBookCollectionReference;\r\n    Button back;\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_view_notifications);\r\n        notificationList = findViewById(R.id.notification_listview);\r\n        currentUser = (User) getIntent().getSerializableExtra(\"User\");\r\n        notifications = new ArrayList<>();\r\n        notifAdapter = new CustomNotificationAdapter(this, notifications);   //Implementing a custom adapter that connects the ListView with the ArrayList using bookcontent.xml layout\r\n        notificationList.setAdapter(notifAdapter);\r\n        db = FirebaseFirestore.getInstance();\r\n        userBookCollectionReference = db.collection(\"Users/\" + currentUser.getUsername() + \"/MyBooks\");//Creating/pointing to a sub-collection of the books that user owns\r\n        userBookCollectionReference.addSnapshotListener(new EventListener<QuerySnapshot>() {\r\n            @Override\r\n            public void onEvent(@Nullable QuerySnapshot queryDocumentSnapshots, @Nullable\r\n                    FirebaseFirestoreException error) { //Manages the state of the sub-collection\r\n                //notifications.clear();\r\n\r\n                for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {\r\n                    //ArrayList<String> req = (ArrayList<String>) doc.getData().get(\"Requests\");\r\n                    System.out.println(\"Book name : \" + doc.getId());\r\n                    HashMap<String,Long> allNotifications = (HashMap<String,Long>) doc.getData().get(\"Notifications\");\r\n                    if(allNotifications!=null) {\r\n                        for (String key : allNotifications.keySet()) {\r\n                            System.out.println(\"Current User is : \"+currentUser.getUsername());\r\n                            System.out.println(\"Borrower : \" + key + \" Book name = \" + doc.getId());\r\n                            long zero = 0;\r\n                            long one = 1;\r\n                            long temp = allNotifications.get(key);\r\n                            System.out.println(\"@Book Seen : \" + temp);\r\n                            if(temp==1)\r\n                                break;\r\n                            if (zero == temp) {\r\n                                notifications.add(key + \" requested \" + doc.getId());\r\n\r\n                                notificationList.setAdapter(notifAdapter);\r\n                                notifAdapter.notifyDataSetChanged();\r\n                                allNotifications.put(key,one);\r\n                                HashMap<String,Object> data = new HashMap<>();\r\n                                data.put(\"Notifications\",allNotifications);\r\n                                userBookCollectionReference\r\n                                        .document(doc.getId())\r\n                                        .update(data)\r\n                                        .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                                            @Override\r\n                                            public void onSuccess(Void aVoid) {\r\n                                                Log.d(\"ViewNotif\",\"Notifications updated\");\r\n                                                System.out.println(\"Database Updated\");\r\n                                            }\r\n                                        })\r\n                                        .addOnFailureListener(new OnFailureListener() {\r\n                                            @Override\r\n                                            public void onFailure(@NonNull Exception e) {\r\n                                                Log.d(\"ViewNotif\",\"Failed to update Notifications\");\r\n                                            }\r\n                                        });\r\n                                System.out.println(\"Book Added*********************\");\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                System.out.println(notifications.size());\r\n\r\n                //bookAdapter.notifyDataSetChanged(); // Notifying the adapter to render any new data fetched from the cloud\r\n            }\r\n\r\n        });\r\n\r\n\r\n    }\r\n}
===================================================================
--- app/src/main/java/com/example/dlpbgj/ViewNotifications.java	(revision fb5d0c5862c8da206c8b4bc8e08247145fce2e2c)
+++ app/src/main/java/com/example/dlpbgj/ViewNotifications.java	(date 1606099729369)
@@ -12,8 +12,10 @@
 import android.widget.Button;
 import android.widget.ListView;
 
+import com.google.android.gms.tasks.OnCompleteListener;
 import com.google.android.gms.tasks.OnFailureListener;
 import com.google.android.gms.tasks.OnSuccessListener;
+import com.google.android.gms.tasks.Task;
 import com.google.firebase.firestore.CollectionReference;
 import com.google.firebase.firestore.EventListener;
 import com.google.firebase.firestore.FirebaseFirestore;
@@ -47,62 +49,61 @@
         notificationList.setAdapter(notifAdapter);
         db = FirebaseFirestore.getInstance();
         userBookCollectionReference = db.collection("Users/" + currentUser.getUsername() + "/MyBooks");//Creating/pointing to a sub-collection of the books that user owns
-        userBookCollectionReference.addSnapshotListener(new EventListener<QuerySnapshot>() {
-            @Override
-            public void onEvent(@Nullable QuerySnapshot queryDocumentSnapshots, @Nullable
-                    FirebaseFirestoreException error) { //Manages the state of the sub-collection
-                //notifications.clear();
+        userBookCollectionReference
+                .get()
+                .addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
+                    @Override
+                    public void onComplete(@NonNull Task<QuerySnapshot> task) {
+                        if (task.isSuccessful()) {
+                            for (QueryDocumentSnapshot doc : task.getResult()) {
+                                Log.d("sucesss", doc.getId() + " => " + doc.getData());
 
-                for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {
-                    //ArrayList<String> req = (ArrayList<String>) doc.getData().get("Requests");
-                    System.out.println("Book name : " + doc.getId());
-                    HashMap<String,Long> allNotifications = (HashMap<String,Long>) doc.getData().get("Notifications");
-                    if(allNotifications!=null) {
-                        for (String key : allNotifications.keySet()) {
-                            System.out.println("Current User is : "+currentUser.getUsername());
-                            System.out.println("Borrower : " + key + " Book name = " + doc.getId());
-                            long zero = 0;
-                            long one = 1;
-                            long temp = allNotifications.get(key);
-                            System.out.println("@Book Seen : " + temp);
-                            if(temp==1)
-                                break;
-                            if (zero == temp) {
-                                notifications.add(key + " requested " + doc.getId());
-
-                                notificationList.setAdapter(notifAdapter);
-                                notifAdapter.notifyDataSetChanged();
-                                allNotifications.put(key,one);
-                                HashMap<String,Object> data = new HashMap<>();
-                                data.put("Notifications",allNotifications);
-                                userBookCollectionReference
-                                        .document(doc.getId())
-                                        .update(data)
-                                        .addOnSuccessListener(new OnSuccessListener<Void>() {
-                                            @Override
-                                            public void onSuccess(Void aVoid) {
-                                                Log.d("ViewNotif","Notifications updated");
-                                                System.out.println("Database Updated");
-                                            }
-                                        })
-                                        .addOnFailureListener(new OnFailureListener() {
-                                            @Override
-                                            public void onFailure(@NonNull Exception e) {
-                                                Log.d("ViewNotif","Failed to update Notifications");
-                                            }
-                                        });
-                                System.out.println("Book Added*********************");
-                            }
-                        }
-                    }
-                }
-                System.out.println(notifications.size());
-
-                //bookAdapter.notifyDataSetChanged(); // Notifying the adapter to render any new data fetched from the cloud
-            }
-
-        });
-
+                                System.out.println("Book name : " + doc.getId());
+                                HashMap<String,Long> allNotifications = (HashMap<String,Long>) doc.getData().get("Notifications");
+                                if(allNotifications!=null) {
+                                    for (String key : allNotifications.keySet()) {
+                                        System.out.println("Current User is : "+currentUser.getUsername());
+                                        System.out.println("Borrower : " + key + " Book name = " + doc.getId());
+                                        long zero = 0;
+                                        long one = 1;
+                                        long temp = allNotifications.get(key);
+                                        System.out.println("@Book Seen : " + temp);
+                                        if(temp==1)
+                                            continue;
+                                        else if (temp == 0) {
+                                            notifications.add(key + " requested " + doc.getId());
+                                            allNotifications.put(key,one);
+                                            HashMap<String,Object> data = new HashMap<>();
+                                            data.put("Notifications",allNotifications);
+                                            userBookCollectionReference
+                                                    .document(doc.getId())
+                                                    .update(data)
+                                                    .addOnSuccessListener(new OnSuccessListener<Void>() {
+                                                        @Override
+                                                        public void onSuccess(Void aVoid) {
+                                                            Log.d("ViewNotif","Notifications updated");
+                                                            System.out.println("Database Updated");
+                                                        }
+                                                    })
+                                                    .addOnFailureListener(new OnFailureListener() {
+                                                        @Override
+                                                        public void onFailure(@NonNull Exception e) {
+                                                            Log.d("ViewNotif","Failed to update Notifications");
+                                                        }
+                                                    });
+                                            System.out.println("Book Added*********************");
+                                        }
+                                    }
+                                }
+
+                            } //For loop ends
+                            System.out.println(notifications.size());
+                            notifAdapter.notifyDataSetChanged();
+                        } else {
+                            Log.d("fail", "Error getting documents: ", task.getException());
+                        }
+                    }
+                });
 
     }
 }
\ No newline at end of file
